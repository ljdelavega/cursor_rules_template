---
description: 
globs: 
alwaysApply: true
---
---
description: Always include these rules.
globs: 
alwaysApply: true
---
Before every Plan/Architect task, ALWAYS do three things:
a. Read the existing documentation in `docs/`: i. `docs/architecture.md`, ii. `docs/product_requirement_docs.md`, iii. `docs/technical.md`.
b. Read the plans and related task planning & context in `tasks/`: i. `tasks/active_context.md`, ii. `tasks/tasks_plan.md`.
c. Get required solution context from the code files in `src/` and other relevant directories.
---
# Below is the Planning Workflow to follow:

1. UNDERSTAND the REQUIREMENTS:
<CLARIFICATION>
- Always ask for clarifications and follow-ups.
- Identify underspecified requirements and ask for detailed information.
- Fully understand all aspects of the problem and gather details to make it very precise and clear.
- Ask about all the hypotheses and assumptions that need to be made. Remove all ambiguities and uncertainties.
- Suggest solutions that I didn't think about, i.e., anticipate my needs and things to be specified.
- Only after having 100% clarity and confidence, proceed to the SOLUTION.
</CLARIFICATION>

2. FORMULATING the SOLUTION:
<STEP BY STEP REASONING>
<DECOMPOSE>
- Have a meta-architecture plan for the solution.
- Break down the problem into key concepts and smaller sub-problems.
</DECOMPOSE>
a. Think about all possible ways to solve the problem.
b. Set up the evaluation criteria and trade-offs to assess the merit of the solutions.
c. Find the optimal solution and the criteria making it optimal, as well as the trade-offs involved.
<WEB USE> You can use the web if needed using use_mcp_tool commands, particularly the search tool from Perplexity. Example:
<use_mcp_tool>
<server_name>perplexity-mcp</server_name>
<tool_name>search</tool_name>
<arguments>
{
  "param1": "value1",
  "param2": "value2"
}
</arguments>
</use_mcp_tool>
</WEB USE>

<MULTI ATTEMPTS>
a. Rigorously reason about the optimality of the solution.
b. Question every assumption and inference, and support them with comprehensive reasoning.
c. Think of better solutions than the present one by combining the strongest aspects of different solutions.
d. Repeat the <MULTI ATTEMPTS> process, refining and integrating different solutions into one until a strong solution is found.
e. You can use <WEB USE> if needed to do research.
</MULTI ATTEMPTS>
</STEP BY STEP REASONING>

3. SOLUTION VALIDATION:

<REASONING PRESENTATION>
- Provide the PLAN with as much detail as possible. 
- Break down the solution step-by-step and think through every step in detail with clarity.
- Reason about its optimality with respect to other promising solutions.
- Explicitly state all your assumptions, choices, and decisions.
- Explain trade-offs in solutions.
- Restate my query in your own words if necessary after giving the solution.
</REASONING PRESENTATION>
- Before implementing, validate the SOLUTION plan produced by <REASONING PRESENTATION>.

---
# Features of the Plan:
1. The plan should be:
a. `extendable`: Further code can be easily built on the current plan. Extending it in the future will be well-supported. Anticipate future functionalities and make the plan adaptable to them.
b. `detailed`: The plan should be very detailed, taking care of every aspect that will be affected by it in every possible way.
c. `robust`: Plan for error scenarios and failure cases, and have fallbacks for possible failure cases.   
d. `accurate`: Every aspect should be in sync with each other, individual components should be correct, and the interfaces should be correct.   
---

After every Plan/Architect task, ALWAYS do two things:
a. Document the plan into existing documentation and update files in `docs/`: i. `docs/architecture.md`, ii. `docs/product_requirement_docs.md`, iii. `docs/technical.md`.
b. Document the plans and related task planning & context in `tasks/`: i. `tasks/active_context.md`, ii. `tasks/tasks_plan.md`.